/*
Copyright ©  Olav Christian Botterli.

Dual licensed under the MIT or GPL Version 2 licenses.

Date: 30.08.2011, Norway.

http://www.webgrid.com
*/


#region Header

/*
Copyright ©  Olav Christian Botterli. 

Dual licensed under the MIT or GPL Version 2 licenses.

Date: 30.08.2011, Norway.

http://www.webgrid.com
*/

#endregion Header

namespace WebGrid.Util
{
    using System.Drawing;

    /// <summary>
    /// This class contains properties and methods to display the graphs supported by the
    /// <see cref="WebGrid.Grid">WebGrid.Grid</see> web control. By default a column using a chart will span
    /// over all displayed rows generated by the <see cref="WebGrid.Grid">WebGrid.Grid</see>.
    /// </summary>
    public class ChartValue
    {
        #region Fields

        internal double _percent;
        internal double _value;

        private Color borderColor;
        private Color color;
        private int highlightValue;
        private string name;

        #endregion Fields

        #region Constructors

        /// <summary>
        /// Empty Constructor.
        /// </summary>
        public ChartValue()
        {
        }

        /// <summary>
        /// Creates a chart.
        /// </summary>
        /// <param name="name">The name of the chart.</param>
        /// <param name="value">The value of the chart.</param>
        public ChartValue(string name, double value)
        {
            Name = name;
            Value = value;
        }

        #endregion Constructors

        #region Properties

        /// <summary>
        /// Gets or sets the border color of the chart.
        /// </summary>
        /// <value>The color of the border.</value>
        public Color BorderColor
        {
            get { return borderColor; }
            set { borderColor = value; }
        }

        /// <summary>
        /// Gets or sets the color of the chart.
        /// </summary>
        /// <value>The color.</value>
        public Color Color
        {
            get { return color; }
            set { color = value; }
        }

        /// <summary>
        /// Gets or sets the highlight value for piechart. This Moves the affected slice X pixels from the origin.
        /// </summary>
        /// <value>The highlight value.</value>
        public int HighlightValue
        {
            get { return highlightValue; }
            set { highlightValue = value; }
        }

        /// <summary>
        /// Gets or sets the name of the chart.
        /// </summary>
        /// <value>The name.</value>
        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        /// <summary>
        /// Sets or gets an absolute value for the chart.
        /// </summary>
        /// <value>The value.</value>
        public double Value
        {
            get { return _value; }
            set
            {
                //if (_chart != null)
                //    _chart.IsCalculated = false;
                _value = value;
            }
        }

        #endregion Properties
    }
}